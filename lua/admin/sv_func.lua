local ADMIN = CORE.ADMIN

local string = string
local table = table
local player = player
local game = game
local net = net
local util = util
local math = math
local http = http
local pairs = pairs

function ADMIN:FindPlayer( id, ply )
	if !id then return nil end
	if !IsValid(ply) then return end
	
	local tbl = {}
	
	if (id == "*") then
		for _, pl in pairs(player.GetAll()) do
			if pl:GetLevel() <= ply:GetLevel() then
				table.insert(tbl, pl)
			end
		end
	end
	
	if (id == "@") then
		for _, pl in pairs(player.GetAll()) do
			if pl != ply then
				if pl:GetLevel() <= ply:GetLevel() then
					table.insert(tbl, pl)
				end
			end
		end
	end
	
	if (id == "me") then
		return {ply}
	end
	
	id = id:lower()
	
	for _, pl in pairs(player.GetAll()) do
		//if pl:GetLevel() <= ply:GetLevel() then 
			if pl:Nick():lower():find(id) or pl:SteamID():find(id) or pl:UniqueID():find(id) then
				table.insert(tbl, pl)
				break
			end
		//end
	end
	
	if UND and #tbl == 0 then
		tbl = UND.FindPlayersByName(id)
	end
	
	return tbl
end

function ADMIN:KickID(id, reason)
	game.ConsoleCommand('kickid ' .. tostring(id) .. ' ' .. reason:gsub(";|\n", " ") .. '\n')
end

function ADMIN:NotifyAll(...)
	local msg = { ... }
	
	net.Start("admin_notify")
		net.WriteTable(msg)
	net.Broadcast()
end

function ADMIN:Notify(ply, ...)
	if !IsValid(ply) then return end
	
	local msg = { ... }
	
	if type(ply) == "table" then
		for k, v in pairs(ply) do
			net.Start("admin_notify")
				net.WriteTable(msg)
			net.Send(v)
		end
	else
		net.Start("admin_notify")
			net.WriteTable(msg)
		net.Send(ply)
	end
end

function ADMIN:NotifyStaff( ... )
	for k, v in pairs(player.GetAll()) do
		if v:GetLevel() > 1 then
			ADMIN:Notify(v, ...)
		end
	end
end

function ADMIN:SendPlayer( from, to, force )
	if not to:IsInWorld() and not force then return false end
	
	local yawForward = to:EyeAngles().yaw
	local directions = { math.NormalizeAngle( yawForward + 180 ), math.NormalizeAngle( yawForward - 180 ), math.NormalizeAngle( yawForward + 90 ), math.NormalizeAngle( yawForward - 90 ), yawForward }
	
	local t = {}
	t.start = to:GetPos() + Vector( 0, 0, 32 )
	t.filter = { to, from }
	
	local i = 1
	t.endpos = to:GetPos() + Angle( 0, directions[ i ], 0 ):Forward() * 47
	local tr = util.TraceEntity( t, from )
	while tr.Hit do
		i = i + 1
		if i > #directions then
			if force then
				return to:GetPos() + Angle( 0, directions[ 1 ], 0 ):Forward() * 47
			else
				return false
			end
		end
		
		t.endpos = to:GetPos() + Angle( 0, directions[ i ], 0 ):Forward() * 47
		
		tr = util.TraceEntity( t, from )
	end
	
	return tr.HitPos
end

function ADMIN:GetFaked( ply )
	local Players = {
		"76561197985607672",
		"76561197970282885",
		"76561197987393094",
		"76561198002151236",
		"76561197988042654",
		"76561197960265733",
		"76561197975724041",
		"76561197994632741",
		"76561198000175595",
		"76561197992219796",
		"76561197964279229",
		"76561197968575517",
		"76561197962313932",
		"76561197968459473",
		"76561197960563532",
		"76561197968452293",
		"76561197971049296",
		"76561197968662512",
		"76561198014254115",
		"76561197980258575",
		"76561197967990561",
		"76561197978236369",
		"76561197974807412",
		"76561197961301890",
		"76561197968729431",
		"76561197974593417",
		"76561198005615861",
		"76561197969518075",
		"76561197975593810",
		"76561197969363440",
		"76561197983311154",
		"76561197969321754",
		"76561197970892150",
		"76561197985627266",
		"76561197960860649",
		"76561197961420203",
		"76561197997296694",
		"76561197960265749",
		"76561197960265730",
		"76561197960265731",
		"76561197960265738",
		"76561197960265743",
		"76561197960265747",
		"76561197960265838",
		"76561197960269040",
		"76561197960287930",
		"76561197960402283",
		"76561197960423941",
		"76561197960434622",
		"76561197960435530",
		"76561197960549564",
		"76561197960789988",
		"76561197962783665",
		"76561197962833771",
		"76561197962844216",
		"76561197963156385",
		"76561197963997393",
		"76561197967144365",
		"76561197967377359",
		"76561197967713982",
		"76561197968282875",
		"76561197969262523",
		"76561197969357684",
		"76561197969400141",
		"76561197969720282",
		"76561197970280218",
		"76561197970285523",
		"76561197970323416",
		"76561197970533489",
		"76561197970543183",
		"76561197970565175",
		"76561197970634249",
		"76561197970893024",
		"76561197970968871",
		"76561197971292977",
		"76561197971951755",
		"76561197972196250",
		"76561197972291076",
		"76561197972563372",
		"76561197972755855",
		"76561197975914763",
		"76561197978266558",
		"76561197979082126",
		"76561197979187556",
		"76561197980632230",
		"76561197980865448",
		"76561197981291930",
		"76561197982227246",
		"76561197982261816",
		"76561197982460133",
		"76561197983819387",
		"76561197984437106",
		"76561197984751122",
		"76561197984981409",
		"76561197985130967",
		"76561197985590840",
		"76561197986943540",
		"76561197989577350",
		"76561197991157076",
		"76561197991390878",
		"76561197991751968",
		"76561197992467988",
		"76561197993060890",
		"76561197999000345",
		"76561198002212024",
		"76561198002402082",
		"76561198032822778",
		"76561198042665686",
		"76561197960269198",
		"76561197972495328",
		"76561198031529588",
		"76561197970530062",
		"76561198136526155",
		"76561198004406016",
		"76561197984212648",
		"76561197993404877",
		"76561198059223364",
		"76561198020213772",
		"76561198048263607",
		"76561197993032363",
		"76561198032818570",
		"76561198005121830",
		"76561198047404672",
		"76561198080912220",
		"76561198053546821",
		"76561197989728462",
		"76561198032743149",
		"76561197974091903",
		"76561198064672162",
		"76561197992681877",
		"76561198028203163",
		"76561198068030907",
		"76561198015999740",
		"76561197977436280",
		"76561197960277670",
		"76561197962413930",
		"76561198073160147",
		"76561198050715070",
		"76561198005731671",
		"76561198035422241",
		"76561197971217114",
		"76561198028024321",
		"76561198040900440",
		"76561197967346751",
		"76561198003204775",
		"76561197961165065",
		"76561198072330588",
		"76561198074191258",
		"76561198032490515",
		"76561198007695232",
		"76561198010062752",
		"76561197969266938",
		"76561198048619164",
		"76561198028573551",
		"76561198005331171",
		"76561197960265740",
		"76561197960265752",
		"76561197960389850",
		"76561197960508417",
		"76561197961218948",
		"76561197968694404",
		"76561197969765131",
		"76561197971400048",
		"76561197972370889",
		"76561197972491988",
		"76561197972903621",
		"76561197978854252",
		"76561197979124299",
		"76561197984750189",
		"76561197989808853",
		"76561197991564203",
		"76561197992637080",
		"76561197993832904",
		"76561197995557785",
		"76561197996448297",
		"76561197997728531",
		"76561198001549544",
		"76561198004986211",
		"76561198007657496",
		"76561198007696304",
		"76561198008486962",
		"76561198010168695",
		"76561198011246300",
		"76561198014674983",
		"76561198015260835",
		"76561198016352617",
		"76561198024119021",
		"76561198024119077",
		"76561198024119145",
		"76561198024119167",
		"76561198024119209",
		"76561198024119233",
		"76561198024119271",
		"76561198024119297",
		"76561198024149372",
		"76561198024149438",
		"76561198024187698",
		"76561198024402255",
		"76561198024468167",
		"76561198046379753",
		"76561198047817884",
		"76561198048142353",
		"76561198049584723",
		"76561198051124559",
		"76561198059694970",
		"76561198062070309",
		"76561198064584373",
		"76561198071493110",
		"76561198074940234",
		"76561198080174103",
		"76561198085177245",
		"76561198114561718",
		"76561198140935475",
	}
	
	local pl = table.Random(Players)
	local str2 = ""
	
	local function success( str, len, head, http )
		str = util.JSONToTable(str)
		
		str = str['response']['players'][1]['personaname']
		
		if str == "" then
			ADMIN:GetFaked(ply)
			return
		end
		
		if str == ply:FakeName() then
			ADMIN:GetFaked(ply)
			return
		end
		
		ply:SetFakeName(str)
		ply:SetFakeAvatar(pl)
	end
	
	local function failed()
		print("failed")
	end
	
	http.Fetch("http://api.steampowered.com/ISteamUser/GetPlayerSummaries/v0002/?key=FFFF0CA2515083BC4C28B7F42469FCFE&steamids=" .. pl, success, failed)
end
